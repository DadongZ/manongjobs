{"version":3,"sources":["components/useFetchJobs.js","components/Job.js","components/JobsPagination.js","components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","Job","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","Location","xs","Check","full_time","id","label","App","setParams","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","err","isCancel","cancelToken2","length","cancel","useFetchJobs","Container","e","param","target","prevParams","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3cc117b7.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ACTIONS = {\n    MAKE_REQUEST: 'make-request',\n    GET_DATA: 'get-data',\n    ERROR: 'error',\n    UPDATE_HAS_NEXT_PAGE: 'update_has_next_page'\n}\n\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json'\n\nfunction reducer (state, action) {\n    //three action types: make-request, get-data, error\n    //payload: the data for the type \n    switch (action.type) {\n        //everty making a request, return to a new state and clear out all jobs we currently have\n        case ACTIONS.MAKE_REQUEST:\n            return {loading: true, jobs: []} \n        //everyting in current state and put that in our new state\n        case ACTIONS.GET_DATA:\n            return {...state, loading: false, jobs: action.payload.jobs}\n        case ACTIONS.ERROR:\n        //clean jobs if there's an eorror and return the error obj\n            return {...state, loading: false, error: action.payload.error, jobs: []}\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\n            return {...state, hasNextPage: action.payload.hasNextPage}\n        default:\n            return state\n    }\n}\n\n//params: job key words, location:s\n//everytime change page needs to run the code again\nexport default function useFetchJobs(params, page) {\n    //const [state, dispatch] = useReducer(reducer, initialState);\n    //dispatch is sort of an alias for action in reducer()\n    const [state, dispatch] = useReducer(reducer, {jobs: [], loading: true})\n\n    //The Effect Hook lets you perform side effects in function components:\n    //everytime params, page changes, rerun the code using useEffect hook \n    useEffect(() => {\n\n        const cancelToken1 = axios.CancelToken.source()\n\n        dispatch({type: ACTIONS.MAKE_REQUEST})\n        axios.get(BASE_URL, {\n            cancelToken: cancelToken1.token,\n            params: {markdown: true, page:page, ...params}\n        }).then( res => {\n            dispatch({type: ACTIONS.GET_DATA, payload: {jobs: res.data}})\n        }).catch(err => {\n            if (axios.isCancel(err)) return \n            dispatch({type: ACTIONS.ERROR, payload: {error: err}})\n        })\n\n        const cancelToken2 = axios.CancelToken.source()\n        axios.get(BASE_URL, {\n            cancelToken: cancelToken2.token,\n            params: {markdown: true, page: page + 1, ...params}\n        }).then( res => {\n            dispatch({type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: {hasNextPage: res.data.length !==0}})\n        }).catch(err => {\n            if (axios.isCancel(err)) return \n            dispatch({type: ACTIONS.ERROR, payload: {error: err}})\n        })\n\n        return () => {\n            cancelToken1.cancel()\n            cancelToken2.cancel()\n        }\n    }, [params, page])\n\n    return state\n}","import React, { useState } from 'react';\nimport { Card, Badge, Button, Collapse } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\n\nexport default function Job({ job }) {\n    const [open, setOpen] = useState(false)\n    return (\n        <Card className='mb3'>\n            <Card.Body>\n                <div className=\"d-flex justify-content-between\">\n                    <div>\n                        <Card.Title>\n                            {job.title} - <span className=\"text-muted font-weight-light\">{job.company}</span>\n                        </Card.Title>\n                        <Card.Subtitle className=\"text-muted mb2\">\n                            {new Date(job.created_at).toLocaleDateString()}\n                        </Card.Subtitle>\n                        <Badge variant=\"secondary\" className=\"mr2\">{job.type}</Badge>\n                        <Badge variant=\"secondary\">{job.location}</Badge>\n                        <div style={{ wordBreak: 'break-all'}}>\n                            <ReactMarkdown source={job.how_to_apply} />\n                        </div>\n                    </div>\n                    <img className=\"d-none d-md-block\" alt={job.company} src={job.company_logo} />\n                </div>\n                <Card.Text>\n                    <Button\n                     onClick={()=>setOpen(prevOpen => !prevOpen)}\n                     variant=\"primary\"\n                     >\n                     {open ? 'Hide Details' : 'View Details'}\n                     </Button>\n                </Card.Text>\n                <Collapse in = {open}>\n                    <div className=\"mt4\">\n                        <ReactMarkdown source={job.description} />\n                    </div>\n                </Collapse>\n            </Card.Body>\n        </Card>\n    )\n}\n","import React from 'react'\nimport { Pagination } from 'react-bootstrap'\n\nexport default function JobsPagination({ page, setPage, hasNextPage}) {\n    function adjustPage(amount) {\n        setPage(prevPage => prevPage + amount)\n    }\n    return (\n        <Pagination>\n            {page !==1 && <Pagination.Prev onClick={() => adjustPage(-1)}/>}\n            {page !==1 && <Pagination.Item onClick={() => setPage(1)}>1</Pagination.Item>}\n            {page >2 && <Pagination.Ellipsis/>}\n            {page >2 && <Pagination.Item onClick={() => adjustPage(-1)}>{ page-1 }</Pagination.Item>}\n            <Pagination.Item active>{ page }</Pagination.Item>\n            {hasNextPage && <Pagination.Item onClick={() => adjustPage(1)}>{page + 1}</Pagination.Item>}\n            {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)} />}\n        </Pagination>\n    )\n}\n","import React from 'react'\nimport { Form, Col } from 'react-bootstrap'\n\nexport default function SearchForm({params, onParamChange}) {\n    return (\n        <Form className=\"mb4\">\n            <Form.Row className=\"align-items-end\">\n                <Form.Group as={Col}>\n                    <Form.Label>Key words</Form.Label>\n                    <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\" />\n                </Form.Group>\n                <Form.Group as={Col}>\n                    <Form.Label>Location</Form.Label>\n                    <Form.Control onChange={onParamChange} value={params.Location} name=\"location\" type=\"text\" />\n                </Form.Group>\n                <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\n                    <Form.Check \n                        onChange={onParamChange} \n                        value={params.full_time} \n                        name=\"full_time\" \n                        id=\"full-time\" \n                        label=\"Only Full Time\"\n                        type='checkbox'\n                        className=\"mb2\"\n                        />\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    )\n}\n","import React, { useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport useFetchJobs from './components/useFetchJobs';\nimport Job from './components/Job';\nimport JobsPagination from './components/JobsPagination';\nimport SearchForm from './components/SearchForm';\nimport './App.css';\n\nfunction App() {\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page)\n\n  function handleParamChange(e) {\n    const param = e.target.name //description\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return {...prevParams, [param]: value}\n    })\n  }\n\n  return (\n    <Container className='my-4'>\n        <h1 className='mb4'>Programmers Jobs</h1>\n        <SearchForm params={params} onParamChange={handleParamChange}/>\n        <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage}/>\n        {loading && <h1>Loading...</h1>}\n        {error && <h1>Error. Try Refreshing.</h1>}\n        {jobs.map(job =>{\n          return <Job key={job.id} job={job} />\n        })}\n        <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage}/>\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}